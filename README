 # üöÄ Syst√®me de Surveillance Intelligent : Votre Vue √† 360¬∞ S√©curis√©e

---

## üéØ Aper√ßu du Projet

Bienvenue sur le d√©p√¥t officiel du **Syst√®me de Surveillance Intelligent** ! Cette application web compl√®te est con√ßue pour transformer la mani√®re dont vous surveillez des zones sp√©cifiques, g√©rez les alertes et obtenez des m√©triques en temps r√©el. Notre solution combine une **interface utilisateur intuitive** avec un **backend robuste et performant**, offrant une gestion de donn√©es fluide et s√©curis√©e.

---

## ‚ú® Fonctionnalit√©s Cl√©s

D√©couvrez les capacit√©s qui rendent notre syst√®me unique :

* **üîí Authentification Robuste** : Acc√®s s√©curis√© via une page de connexion d√©di√©e, exigeant un nom d'utilisateur et un mot de passe.
* **üó∫Ô∏è Tableau de Bord Interactif** : Visualisez vos zones surveill√©es en un coup d'≈ìil gr√¢ce √† une carte dynamique et interactive.
* **‚ûï Gestion Simplifi√©e des Zones** : Cr√©ez, modifiez et supprimez vos zones de surveillance en toute simplicit√©.
* **üö® Alertes en Temps R√©el** : Recevez des notifications instantan√©es et g√©rez efficacement les alertes critiques.
* **üìà Analyse & M√©triques D√©taill√©es** : Suivez l'activit√© du syst√®me et prenez des d√©cisions √©clair√©es gr√¢ce √† des donn√©es cl√©s et des visualisations graphiques.
* **üì± Interface Responsive Universelle** : Profitez d'une exp√©rience utilisateur optimis√©e et fluide, quel que soit votre appareil (ordinateurs, tablettes, mobiles).

---

## üèóÔ∏è Architecture Technique

Le projet est con√ßu avec une architecture client-serveur moderne, garantissant une s√©paration claire des responsabilit√©s et une meilleure maintenabilit√©.

### üíª Frontend : L'Exp√©rience Utilisateur

D√©velopp√© avec des technologies de pointe, le frontend assure une interaction fluide et une pr√©sentation dynamique des donn√©es.

* **Technologies phares** : **React**, **TypeScript**, HTML, CSS.
* **Structure des dossiers (extraits)** :
    * `client/src/App.tsx` : Le composant racine de l'application.
    * `client/src/pages/login.tsx` : La page d'authentification.
    * `client/src/pages/landing.tsx` : Le tableau de bord principal apr√®s connexion.
    * `client/src/hooks/useAuth.ts` : Un hook personnalis√© pour une gestion d'authentification √©l√©gante.

### ‚öôÔ∏è Backend : Le C≈ìur de l'Intelligence

Construit sur une base solide, le backend g√®re toute la logique m√©tier, l'authentification des utilisateurs et l'acc√®s aux donn√©es via une API RESTful.

* **Technologies phares** : **Flask (Python)**, Flask-CORS.
* **Fichier principal** :
    * `src/main.py` : Ce fichier contient le c≈ìur du serveur Flask, d√©finissant toutes les routes API et la logique d'authentification essentielle.

---

## üöÄ D√©marrage Rapide : Installation & Lancement

Suivez ces instructions d√©taill√©es pour configurer et lancer l'application sur votre environnement local.

### Pr√©requis Indispensables

Avant de commencer, assurez-vous que les √©l√©ments suivants sont install√©s sur votre syst√®me :

* **Node.js** (version 14 ou sup√©rieure)
* **npm** (Node Package Manager)
* **Python** (version 3.8 ou sup√©rieure)
* **pip** (Python Package Installer)

### Instructions d'Installation

1.  **Clonez le d√©p√¥t GitHub** :
    ```bash
    git clone [https://github.com/Greenf1/Intelligent-Surveillance-System.git](https://github.com/Greenf1/Intelligent-Surveillance-System.git)
    cd Intelligent-Surveillance-System
    ```

2.  **Installez les d√©pendances du Frontend** :
    ```bash
    cd client
    npm install
    cd ..
    ```

3.  **Installez les d√©pendances du Backend** :
    ```bash
    python3 -m venv venv
    source venv/bin/activate  # Pour Windows : venv\Scripts\activate
    pip install -r requirements.txt
    ```
    > **Note** : Si le fichier `requirements.txt` n'est pas pr√©sent, vous pouvez le g√©n√©rer apr√®s avoir activ√© votre environnement virtuel et install√© les packages n√©cessaires en ex√©cutant : `pip freeze > requirements.txt`.

### Lancement de l'Application

Une fois les d√©pendances install√©es, vous pouvez d√©marrer les deux parties de l'application :

1.  **D√©marrez le Backend (Serveur Flask)** :
    ```bash
    source venv/bin/activate  # Pour Windows : venv\Scripts\activate
    python src/main.py
    ```
    Le serveur sera accessible localement √† l'adresse : `http://localhost:5000`.

2.  **D√©marrez le Frontend (Serveur de D√©veloppement React)** :
    ```bash
    cd client
    npm start
    ```
    Le frontend d√©marrera g√©n√©ralement sur `http://localhost:3000` et ouvrira automatiquement l'application dans votre navigateur par d√©faut.

---

## üí° Guide d'Utilisation

### Acc√®s au Syst√®me

Naviguez vers l'URL de l'application (localement : `http://localhost:3000`).

Utilisez les **identifiants par d√©faut** pour vous connecter :
* **Nom d'utilisateur** : `admin`
* **Mot de passe** : `admin123`

### Exploration du Tableau de Bord

Apr√®s une connexion r√©ussie, le **tableau de bord intuitif** vous attend. Il vous permettra de visualiser et de g√©rer efficacement toutes les donn√©es de surveillance : zones, alertes et m√©triques syst√®me.

### üåê API Backend : Points d'Acc√®s

Le backend expose une s√©rie de points d'API RESTful pour une interaction programmatique et transparente :

* `POST /api/auth/login` : Authentification des utilisateurs.
* `POST /api/auth/logout` : D√©connexion s√©curis√©e de l'utilisateur.
* `GET /api/auth/user` : R√©cup√©ration des informations de l'utilisateur actuellement connect√©.
* `GET /api/zones` : R√©cup√®re la liste de toutes les zones de surveillance.
* `POST /api/zones` : Cr√©e une nouvelle zone de surveillance.
* `PUT /api/zones/<int:zone_id>` : Met √† jour les d√©tails d'une zone sp√©cifique par son ID.
* `DELETE /api/zones/<int:zone_id>` : Supprime une zone sp√©cifique par son ID.
* `GET /api/alerts` : R√©cup√®re toutes les alertes g√©n√©r√©es par le syst√®me.
* `PUT /api/alerts/<int:alert_id>/resolve` : Marque une alerte sp√©cifique comme r√©solue.
* `GET /api/metrics` : R√©cup√®re les m√©triques globales et d√©taill√©es du syst√®me.
* `GET /api/threat-levels` : R√©cup√®re les niveaux de menace agr√©g√©s par zone.
* `GET /api/status` : V√©rifie le statut des diff√©rents services int√©gr√©s (ex: OpenAI, base de donn√©es).

Le frontend est enti√®rement architectur√© pour communiquer et interagir de mani√®re transparente avec ces APIs, assurant une exp√©rience utilisateur fluide et une gestion des donn√©es automatis√©e.
Here are some ideas to get you started:
